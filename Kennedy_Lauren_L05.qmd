---
title: "L05 Annotation & Positioning"
subtitle: "Data Visualization (STAT 302)" 
author: "Lauren Kennedy"
pagetitle: "L05 Lauren Kennedy"

format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    code-fold: show
    link-external-newwindow: true
    fig-dpi: 300

execute:
  warning: false

from: markdown+emoji 
reference-location: margin
citation-location: margin 
---


## Overview

The goal of this lab is to explore methods for annotating and positioning with `ggplot2` plots. This lab also utilizes `scale_*` to a greater degree which is part of our next reading. In fact, students may find going through/reading chapter [11 Colour scales and legends](https://ggplot2-book.org/scale-colour.html) useful.

## Datasets

We'll be using the `blue_jays.rda`, `titanic.rda`, `Aus_athletes.rda`, and `tech_stocks.rda` datasets.

```{r}
#| label: load-pkgs-data

# Load package(s)
library(tidyverse)
library(lubridate)
library(ggrepel)
library(patchwork)
library(cowplot)

# Load data
load("data/blue_jays.rda")
load("data/titanic.rda")
load("data/Aus_athletes.rda")
load("data/tech_stocks.rda")

```

## Exercises

Complete the following exercises.

## Exercise 1

Using the `blue_jays.rda` dataset, recreate the following graphic as precisely as possible.

*Hints:*

- Transparency is 0.8
- Point size 2
- Create a `label_info` dataset that is a subset of original data, just with the 2 birds to be labeled
- Shift label text horizontally by 0.5
- See ggplot2 textbook 8.3 building custom annotations 
- Annotation size is 4
- Classic theme

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: Ex1plot 

label_info <- blue_jays %>%
  filter(BirdID %in% c("702-90567", "1142-05914"))

yrng <- range(blue_jays$Head)
xrng <- range(blue_jays$Mass)
caption <-"Head length versus body mass for 123 blue jays"

ggplot(blue_jays, 
       mapping = aes(Mass, Head, color = KnownSex)) +
  geom_point(size = 2, alpha = 0.8, show.legend = FALSE) +
  geom_text(data = label_info,
    aes(label = KnownSex),
    nudge_x = 0.5,
    show.legend = FALSE
  ) +
  xlab("Body mass (g)") +
  ylab("Head length (mm)") +
  annotate("text", 
           x = xrng[1], y = yrng[2], 
           label = caption,
           hjust = 0, vjust = 1, size = 4) +
  theme_classic()

```

:::

## Exercise 2

Using the `tech_stocks` dataset, recreate the following graphics as precisely as possible. Use the column `price_indexed`.

### Plot 1

*Hints:*

- Create a `label_info` dataset that is a subset of original data, just containing the last day's information for each of the 4 stocks
- serif font
- Annotation size is 4

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: Ex1Plot1

caption <-"Stock price over time for four major tech companies"

label_info <- tech_stocks %>%
  arrange(desc(date)) %>%
  distinct(company, .keep_all = TRUE)

yrng <- range(tech_stocks$price_indexed)
xrng <- range(tech_stocks$date)
  
ggplot(tech_stocks, aes(date, price_indexed)) +
  geom_line(aes(color = company), show.legend = FALSE) +
  ylab("Stock price, indexed") +
  labs(x = NULL) +
  geom_text(data = label_info,
            aes(label = company)) +
  annotate("text", 
           x = xrng[1], y = yrng[2], 
           label = caption,
           hjust = 0, vjust = 1, size = 4, family = "serif") +
  theme_minimal()

```

:::

### Plot 2

*Hints:*

- Package `ggrepel`
  - `box.padding` is 0.6
  - Minimum segment length is 0 
  - Horizontal justification is to the right
  - seed of 9876
- Annotation size is 4
- serif font

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: Ex1Plot2
caption <-"Stock price over time for four major tech companies"

label_info <- tech_stocks %>%
  arrange(desc(date)) %>%
  distinct(company, .keep_all = TRUE)

yrng <- range(tech_stocks$price_indexed)
xrng <- range(tech_stocks$date)
  
ggplot(tech_stocks, aes(date, price_indexed)) +
  geom_line(aes(color = company), show.legend = FALSE) +
  ylab("Stock price, indexed") +
  labs(x = NULL) +
  annotate("text", 
           x = xrng[1], y = yrng[2], 
           label = caption,
           hjust = 0, vjust = 1, size = 4, family = "serif") +
  theme_minimal() +
  geom_text_repel(data = label_info, aes(label = company),
                           seed = 9876, 
                           box.padding = 0.6,
                           min.segment.length = 0,
                           hjust = "right")

```

:::

## Exercise 3

Using the `titanic.rda` dataset, recreate the following graphic as precisely as possible.

*Hints:*

- Create a new variable that uses `died` and `survived` as levels/categories
- Hex colors: `#D55E00D0`, `#0072B2D0` (no alpha is being used)

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: Ex3Plot1

titanic %>%
  mutate(survival = ifelse(survived ==0, 
                           "died", "survived")) %>%
  ggplot(aes(sex, fill = sex)) +
  geom_bar() + 
  facet_grid(survival ~ class) +
  theme_minimal() +
  scale_x_discrete(name = NULL) +
  scale_fill_manual(values = c("#D55E00D0", "#0072B2D0"),
                    guide = "none")


```

:::

## Exercise 4

Use the `athletes_dat` dataset --- extracted from `Aus_althetes.rda` --- to recreate the following graphic as precisely as possible. **Create the graphic twice**: once using `patchwork` and once using `cowplot`.

```{r}
#| label: ex-4-data-wrangle

# Get list of sports played by BOTH sexes
both_sports <- Aus_athletes |>
  # dataset of columns sex and sport 
  # only unique observations
  distinct(sex, sport) |>
  # see if sport is played by one gender or both
  count(sport) |>
  # only want sports played by BOTH sexes
  filter(n == 2) |>
  # get list of sports
  pull(sport)

# Process data
athletes_dat <- Aus_athletes |>
  # only keep sports played by BOTH sexes
  filter(sport %in% both_sports) |>
  # rename track (400m) and track (sprint) to be track
  # case_when will be very useful with shiny apps
  mutate(
    sport = case_when(
      sport == "track (400m)" ~ "track",
      sport == "track (sprint)" ~ "track",
      TRUE ~ sport
      )
    )
```

*Hints:*

- Build each plot separately
- Bar plot: lower limit 0, upper limit 95
- Bar plot: shift bar labels by 5 units and top justify 
- Bar plot: label size is 5
- Bar plot: `#D55E00D0` & `#0072B2D0` --- no `alpha`
- Scatterplot: `#D55E00D0` & `#0072B2D0` --- no `alpha`
- Scatterplot: filled circle with "white" outline; size is 3
- Scatterplot: `rcc` is red blood cell count; `wcc` is white blood cell count
- Boxplot: outline `#D55E00` and `#0072B2`; shading `#D55E0040` and `#0072B240`
- Boxplot: should be made narrower; 0.5
- Boxplot: Legend is in top-right corner of bottom plot
- Boxplot: Space out labels `c("female    ", "male")`
- Boxplot: Legend shading matches hex values for top two plots

### Using `patchwork`

::: {.callout-tip icon="false"}
## Solution

```{r}
#| label: ex4plot1

bar_labels <- athletes_dat %>% count(sex)

p1 <- ggplot(athletes_dat, aes(sex, fill = sex)) +
  geom_bar() +
  theme_minimal() +
  geom_text(
    data = bar_labels,
    #x = sex gets defaulted down from ggplot layer
    #we just need to specify the y location for text
    aes(y = n, label = n),
    nudge_y = -5,
    vjust = "top", 
    size = 5
  ) +
  scale_y_continuous(name = "number", limits = c(0, 95),
                     #removes vertical space below 0
                     expand = c(0,0)) +
  scale_fill_manual(values = c("#D55E00D0", '#0072B2D0'), guide = "none") +
  scale_x_discrete(NULL,
                   labels = c("female", "male"))
  

p2 <- ggplot(athletes_dat, aes(rcc, wcc, fill = sex)) +
  geom_point(shape = 21, color = "white", size = 3) +
  theme_minimal() +
  labs(y = "WBC count", x = "RBC count") +
  scale_fill_manual(values = c("#D55E00D0", 
                               "#0072B2D0"),
                    guide = "none")
  
p3 <- ggplot(athletes_dat, aes(sport, pcBfat, color = sex, fill = sex)) +
  geom_boxplot(width = 0.5) + 
  scale_color_manual(NULL,
                     values = c("#D55E00", "#0072B2"), 
                     labels = c("female", "male")) +
  scale_fill_manual(NULL, 
                    values = c("#D55E0040", "#0072B240"),
                    labels = c("female", "male")) +
  theme_minimal() +
  theme(
    #anchor point of legend is top right corner of plot 
    legend.justification = c(1,1),
    #location in the plot is top right 
    legend.position = c(1,1),
    legend.direction = "horizontal"
  ) +
  guides(
    color = guide_legend(
      override.aes = list(color = NA, 
                          fill = c("#D55E00D0", "#0072B2D0"))
    )) +
  labs(x = NULL, y = "% body fat")

(p1 + p2) / p3

```

:::

### Using `cowplot`

Use [`cowplot::plot_grid()`](https://wilkelab.org/cowplot/articles/plot_grid.html) to combine them.

::: {.callout-tip icon="false"}
## Solution

```{r}
plot_grid(
  plot_grid(p1, p2, ncol = 2),
  p3,
  nrow = 2)

```

:::

## Exercise 5

Create the following graphic using `patchwork`.

*Hints:*

- Use plots created in Exercise 4
- inset theme is classic
  - Useful values: 0, 0.45, 0.75, 1
- plot annotation `"A"`

::: {.callout-tip icon="false"}
## Solution

```{r}
p2 + 
  inset_element(p1, left = 0.75, bottom = 0, right = 1, top = 0.45) +
  theme_classic() +
  plot_annotation(tag_levels = "A")

```

:::